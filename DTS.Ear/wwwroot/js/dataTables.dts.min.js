var dataModel;
const dataTable = {
    name: function (e) {
        var dataTableName;
        return dataTableName;
    },
    create: function (e) {
        //debugger;
        let sort = [];
        let columnsDeffs = [];
        let columnsArray = [];
        var columns = $('#' + e[0].id).find("thead > tr > th");
        var dsrc = e[0].getAttribute("dsrc");
        var rol = e[0].getAttribute("rol");
        var c = e[0].getAttribute("c");
        var d = e[0].getAttribute("d");
        var i = e[0].getAttribute("i"); i = "?i=" + i + "";

        var table;
        //debugger;
        if (rol == "router") {

            columnsDeffs.push({ tabindex: 0, className: "checkbox-column", targets: [0] });
            columnsArray.push({
                data: columns[0].getAttribute("fsrc"),
                render: function (data, type, row) {
                    return '<input class="table-checkbox" type="checkbox" data="' + data + '">'
                }, targets: 0,
            },)
            for (let i = 1; i < columns.length; i++) {
                if (columns[i].getAttribute("sort") != null) {
                    sort.push([i, columns[i].getAttribute("sort")]);
                }
                columnsArray.push({ data: columns[i].getAttribute("fsrc") });
            }
            table = $('#' + e[0].id).DataTable({
                ajax: { url: "/" + c + "/" + d + i, dataSrc: "data." + dsrc },
                keys: true,
                columnDefs: columnsDeffs,
                order: sort,
                columns: columnsArray,
            });
        }
        if (rol == "selector") {

            for (let i = 0; i < columns.length; i++) {
                if (columns[i].getAttribute("sort") != null) {
                    sort.push([i, columns[i].getAttribute("sort")]);
                }
                columnsArray.push({ data: columns[i].getAttribute("fsrc") });
            }
            table = $('#' + e[0].id).DataTable({
                ajax: { url: "/" + c + "/" + d + i, dataSrc: "data." + dsrc },
                keys: true,
                columnDefs: columnsDeffs,
                order: sort,
                columns: columnsArray,
                "createdRow": function (row, data, dataIndex) {
                    $(row).attr("tabIndex", "0");
                }
            });
        }

        if (rol == "editor") {
            columnsDeffs.push({ tabIndex: 0, className: "checkbox-column", targets: [0] });
            columnsArray.push({
                data: columns[0].getAttribute("fsrc"), render: function (data, type, row) {
                    return '<input class="table-checkbox" name="' + columns[0].getAttribute("fsrc") + '" type="checkbox" data="' + data + '">'
                }, targets: 0,
            },)
            for (let i = 1; i < columns.length; i++) {

                //columnsArray.push({ data: columns[i].getAttribute("fsrc") });
                columnsArray.push({
                    data: columns[i].getAttribute("fsrc"), render: function (data, type, row) {
                        let result = '<input clindex="' + i + '" class="form-control editable-cell " ' + (columns[i].hasAttribute("max") ? 'max="' + data + '" oninput="checkValue(this);"' : '') + 'data-error="Lütfen Alanı Doldurun" required="required" type="' + columns[i].getAttribute("typeof") + '" name="' + columns[i].getAttribute("fsrc") + '" style="min-width:100px;" value="' + data + '">' +
                            '<div style="display:none;" >" ' + data + '"</div>';
                        return result;
                    }, targets: i,
                },)
            }
            table = $('#' + e[0].id).DataTable({
                keys: true,
                bPaginate: false,
                columnDefs: columnsDeffs,
                columns: columnsArray,
            });
        }


        if (rol == "malHizmetCalculator") {
            columnsDeffs.push({ keys: true, tabindex: 0, className: "checkbox-column", targets: [0] });
            columnsArray.push({
                data: columns[0].getAttribute("fsrc"),
                render: function (data, type, row) {

                    return '<input class="table-checkbox" name="' + columns[0].getAttribute("fsrc") + '" type="checkbox" data="' + data + '">';
                }, targets: 0,
            },)
            for (let i = 1; i < columns.length; i++) {
                //columnsArray.push({ data: columns[i].getAttribute("fsrc") });
                columnsArray.push({
                    className: ((columns[i].style.display == 'none') ? 'hiddenColumn' : ''),
                    data: columns[i].getAttribute("fsrc"),
                    render: function (data, type, row) {
                        if (columns[i].getAttribute("fsrc") == "tevkifat") {
                            //debugger;
                            let result = '<select class="form-control editable-cell" oninput="checkValue(this);" name="tevkifat" style="min-width:100px; ' /*+ ((columns[i].style.display == 'none') ? 'display:none;"' : '')*/ + '"><option value="">-----</option><option value="601">601 - Yapım İşleri ile Bu İşlerle Birlikte İfa Edilen Mühendislik-Mimarlık ve Etüt-Proje Hizmetleri [KDVGUT-(I/C-2.1.3.2.1)]</option><option value="602">602 - Etüt, plan-proje, danışmanlık, denetim vb</option><option value="603">603 - Makine, Teçhizat, Demirbaş ve Taşıtlara Ait Tadil, Bakım ve Onarım Hizmetleri [KDVGUT- (I/C-2.1.3.2.3)]</option><option value="604">604 - Yemek servis hizmeti</option><option value="605">605 - Organizasyon hizmeti</option><option value="606">606 - İşgücü temin hizmetleri</option><option value="607">607 - Özel güvenlik hizmeti</option><option value="608">608 - Yapı denetim hizmetleri</option><option value="609">609 - Fason Olarak Yaptırılan Tekstil ve Konfeksiyon İşleri, Çanta ve Ayakkabı Dikim İşleri ve Bu İşlere Aracılık Hizmetleri [KDVGUT-(I/C-2.1.3.2.7)]</option><option value="610">610 - Turistik mağazalara verilen müşteri bulma/ götürme hizmetleri</option><option value="611">611 - Spor kulüplerinin yayın, reklam ve isim hakkı gelirlerine konu işlemleri</option><option value="612">612 - Temizlik Hizmeti [KDVGUT-(I/C-2.1.3.2.10)]</option><option value="613">613 - Çevre, Bahçe ve Bakım Hizmetleri [KDVGUT-(I/C-2.1.3.2.11)]</option><option value="614">614 - Servis taşımacıliğı</option><option value="615">615 - Her Türlü Baskı ve Basım Hizmetleri [KDVGUT-(I/C-2.1.3.2.12)]</option><option value="616">616 - Diğer Hizmetler [KDVGUT-(I/C-2.1.3.2.13)]</option><option value="617">617 - Hurda metalden elde edilen külçe teslimleri</option><option value="618">618 - Hurda Metalden Elde Edilenler Dışındaki Bakır, Çinko, Demir Çelik, Alüminyum ve Kurşun Külçe Teslimi [KDVGUT-(I/C-2.1.3.3.1)]</option><option value="619">619 - Bakir, çinko ve alüminyum ürünlerinin teslimi</option><option value="620">620 - istisnadan vazgeçenlerin hurda ve atık teslimi</option><option value="621">621 - Metal, plastik, lastik, kauçuk, kâğit ve cam hurda ve atıklardan elde edilen hammadde teslimi</option><option value="622">622 - Pamuk, tiftik, yün ve yapaği ile ham post ve deri teslimleri</option><option value="623">623 - Ağaç ve orman ürünleri teslimi</option><option value="624">624 - Yük Taşımacılığı Hizmeti [KDVGUT-(I/C-2.1.3.2.11)]</option><option value="625">625 - Ticari Reklam Hizmetleri [KDVGUT-(I/C-2.1.3.2.15)]</option><option value="626">626 - Diğer Teslimler [KDVGUT-(I/C-2.1.3.3.7.)]</option><option value="627">627 - Demir-Çelik Ürünlerinin Teslimi [KDVGUT-(I/C-2.1.3.3.8)]</option><option value="627-Ex">627 - Demir-Çelik Ürünlerinin Teslimi [KDVGUT-(I/C-2.1.3.3.8)] (01/11/2022 tarihi öncesi)</option><option value="801">801 - Yapım İşleri ile Bu İşlerle Birlikte İfa Edilen Mühendislik-Mimarlık ve Etüt-Proje Hizmetleri[KDVGUT-(I/C-2.1.3.2.1)]</option><option value="802">802 - Etüt, Plan-Proje, Danışmanlık, Denetim ve Benzeri Hizmetler[KDVGUT-(I/C-2.1.3.2.2)]</option><option value="803">803 - Makine, Teçhizat, Demirbaş ve Taşıtlara Ait Tadil, Bakım ve Onarım Hizmetleri[KDVGUT- (I/C-2.1.3.2.3)]</option><option value="804">804 - Yemek Servis Hizmeti[KDVGUT-(I/C-2.1.3.2.4)]</option><option value="805">805 - Organizasyon Hizmeti[KDVGUT-(I/C-2.1.3.2.4)]</option><option value="806">806 - İşgücü Temin Hizmetleri[KDVGUT-(I/C-2.1.3.2.5)]</option><option value="807">807 - Özel Güvenlik Hizmeti[KDVGUT-(I/C-2.1.3.2.5)]</option><option value="808">808 - Yapı Denetim Hizmetleri[KDVGUT-(I/C-2.1.3.2.6)]</option><option value="809">809 - Fason Olarak Yaptırılan Tekstil ve Konfeksiyon İşleri, Çanta ve Ayakkabı Dikim İşleri ve Bu İşlere Aracılık Hizmetleri[KDVGUT-(I/C-2.1.3.2.7)]</option><option value="810">810 - Turistik Mağazalara Verilen Müşteri Bulma/ Götürme Hizmetleri[KDVGUT-(I/C-2.1.3.2.8)]</option><option value="811">811 - Spor Kulüplerinin Yayın, Reklâm ve İsim Hakkı Gelirlerine Konu İşlemleri[KDVGUT-(I/C-2.1.3.2.9)]</option><option value="812">812 - Temizlik Hizmeti[KDVGUT-(I/C-2.1.3.2.10)]</option><option value="813">813 - Çevreve Bahçe Bakım Hizmetleri[KDVGUT-(I/C-2.1.3.2.10)]</option><option value="814">814 - Servis Taşımacılığı Hizmeti[KDVGUT-(I/C-2.1.3.2.11)]</option><option value="815">815 - Her Türlü Baskı ve Basım Hizmetleri[KDVGUT-(I/C-2.1.3.2.12)]</option><option value="816">816 - Hurda Metalden Elde Edilen Külçe Teslimleri[KDVGUT-(I/C-2.1.3.3.1)]</option><option value="817">817 - Hurda Metalden Elde Edilenler Dışındaki Bakır, Çinko, Demir Çelik, Alüminyum ve Kurşun Külçe Teslimi [KDVGUT-(I/C-2.1.3.3.1)]</option><option value="818">818 - Bakır, Çinko, Alüminyum ve Kurşun Ürünlerinin Teslimi[KDVGUT-(I/C-2.1.3.3.2)]</option><option value="819">819 - İstisnadan Vazgeçenlerin Hurda ve Atık Teslimi[KDVGUT-(I/C-2.1.3.3.3)]</option><option value="820">820 - Metal, Plastik, Lastik, Kauçuk, Kâğıt ve Cam Hurda ve Atıklardan Elde Edilen Hammadde Teslimi[KDVGUT-(I/C-2.1.3.3.4)]</option><option value="821">821 - Pamuk, Tiftik, Yün ve Yapağı İle Ham Post ve Deri Teslimleri[KDVGUT-(I/C-2.1.3.3.5)]</option><option value="822">822 - Ağaç ve Orman Ürünleri Teslimi[KDVGUT-(I/C-2.1.3.3.6)]</option><option value="823">823 - Yük Taşımacılığı Hizmeti [KDVGUT-(I/C-2.1.3.2.11)]</option><option value="824">824 - Ticari Reklam Hizmetleri [KDVGUT-(I/C-2.1.3.2.15)]</option><option value="825">825 - Demir-Çelik Ürünlerinin Teslimi [KDVGUT-(I/C-2.1.3.3.8)]</option></select>';
                            return result;


                        }
                        else {
                            let result = '<input clindex="' + i + '" class="form-control editable-cell " oninput="checkValue(this);" step="any" ' + (columns[i].hasAttribute("max") ? 'max="' + data + '"  ' : '') + 'data-error="Lütfen Alanı Doldurun" required="required" type="' + columns[i].getAttribute("typeof") + '" name="' + columns[i].getAttribute("fsrc") + '" style="min-width:100px;" value="' + data + '">' +
                                '<div style="display:none;" >" ' + data + '"</div>';

                            return result;

                        }
                    },
                    targets: i,
                },);

            }
            table = $('#' + e[0].id).DataTable({
                keys: true,
                bPaginate: false,
                columnDefs: columnsDeffs,
                columns: columnsArray,
            });
        }


        dataTableName = $('#' + e[0].id);
        //debugger;

        //debugger;
    },
    refresh: function (e) {
        debugger;
        columns = $('#' + e[0].id).find("thead > tr > th");
    },
    reload: function (e) {
        table = $('#' + e[0].id).DataTable();
        table.ajax.reload();
    },
    destroy: function (e) {
        debugger;
        table = $('#' + e[0].id).DataTable();
        table.destroy();
    },
    remove: function (e, a) {
        table = $('#' + e[0].id).DataTable();
        for (let i = 0; i < a.length; i++) {
            table.row($('#' + e[0].id).find("input[data='" + a[i] + "']").closest("tr")).remove().draw();
        }
        //debugger; 
    }
}


$('.add').click(function () {
    location.href = '/' + ctrl + '/add';
});
$('.recycleBin').click(function () {
    location.href = '/' + ctrl + '/recycleBin';
});

$('.save').click(function (e) {
    if ($.find("table")[0].id == "dataTable1") {
        //debugger;
        alert('/' + ctrl + '/save');
    }

});

$('.remove').click(function (e) {
    //debugger;

    var a = [];
    //var thisDataTable = $(e.target).closest("form").find("table");
    var thisDataTable = $(e.target).closest("form").find(".activeDataTable");
    var thisDataTableID = thisDataTable.attr('id');
    var thisDataTableCtrl = thisDataTable.attr('c');
    var rol = thisDataTable.attr("rol");
    $("#" + thisDataTableID + " td input:checkbox:checked").each(function () {
        //debugger;
        var dx = $(this)[0].getAttribute('data'); a.push(dx);
    });
    var aCount = a.length;

    if (rol == "malHizmetCalculator") {
        if (a.length) {
            dataTable.remove(thisDataTable, a);

            if ($('input[name=miktar]').length == 0) {
                checkValue();
            }
            else {
                for (var i = 0; i < $('input[name=miktar]').length; i++) { }
                $($('input[name=miktar]')).each(function () {
                    checkValue(this);
                });
            }



        }
        else {
            alertBox(false, 'Lütfen Seçim Yapınız.');
        }
    }
    else {
        if (a.length) {
            if (confirm('Seçili ' + aCount + ' Kaydı Silmek Üzeresiniz. Devam edilsin mi?')) {
                $.ajax({
                    url: '/' + thisDataTableCtrl + '/remove', type: 'POST', dataType: "json", traditional: true, data: { i: a },
                    success: function (result) {
                        if (result) {
                            alertBox(true, "İşlem başarıyla tamamlandı");
                            //dataTable.reload(thisDataTable); //reload Datatable !BAD
                            dataTable.remove(thisDataTable, a);
                        }
                    },
                });
            } else {
                // Do nothing! 
            }
        }
        else {
            alertBox(false, 'Lütfen Seçim Yapınız.');
        }
    }
});


$('table th > .select-all').change(function (e) {
    //debugger;
    var thisDataTableID = "#" + e.target.closest("table").id;
    $(thisDataTableID + " input:checkbox").each(function () {
        $(this)[0].checked = e.target.checked
    });
});



$("table td input[type=checkbox]").change(function () {
    var checkedBox = $("table td input[type=checkbox]:checked").length;
    if (this.checked) {
        //Do stuff
    }
});


$('table[rol=selector]').click(function (e) {
    if (e.target.tagName == "TD") {
        //alertBox(true, "Selected");
        //debugger;
        var selectedData = $('#' + e.currentTarget.id).DataTable().rows($(e.target).closest("tr")).data();
        if ($(e.target).closest("table").attr("target") == "inputs") {
            try { $('#' + e.currentTarget.id).trigger('select', [selectedData]); } catch (e) { console.log("Selector Table Error !") }
        }
        else {
            var target = $('#' + $(e.target).closest("table").attr("target"));
            try { $('#' + e.currentTarget.id).trigger('select', [selectedData, target]); } catch (e) { console.log("Selector Table Error !") }
        }

        $('.close').click(); //$('.modal').modal().hide(); //$('.modal').modal('toggle'); //
    }

})

$('table[rol=router]').click(function (e) {
    if (e.target.className.includes("checkbox-column")) {
        e.target.firstChild.click();
    }
    else if (e.target.tagName == "TD" && !e.target.className.includes("checkbox-column")) {

        //var ix = btoa($(e.target).closest("tr").find(".table-checkbox")[0].getAttribute('data'));//64
        var ix = $(e.target).closest("tr").find(".table-checkbox")[0]//64
        if (ix != null) {
            ix = ix.getAttribute('data');
            ix = "?i=" + ix;
        }
        //var x = e.target.closest("tr").querySelector('.table-checkbox').getAttribute("data");
        //debugger;
        var c = e.target.closest("table").getAttribute('c');
        var r = e.target.closest("table").getAttribute('r');
        if (r != "" && r != null) {
            var link = "/" + c + "/" + r + ix;
            location.href = link;// (e.target.closest("table").getAttribute("redirect") +'?i=' + ix);
        }
    }
})



$(document).click(function (e) {

    //debugger; 
    //if (e.target.tagName == "TD" && !e.target.className.includes("checkbox-column") && !e.target.className.includes("odd")) { 
    //}

    if (e.target.type == "checkbox") {
        if ($("table td input[type=checkbox]:checked").length > 0) {
            //alert("checked");
        }

        var $chkboxes = $('table td input[type="checkbox"]');
        var lastChecked = null;

        $chkboxes.click(function (e) {
            if (!lastChecked) {
                lastChecked = this;
                return;
            }

            if (e.shiftKey) {
                var start = $chkboxes.index(this);
                var end = $chkboxes.index(lastChecked);
                $chkboxes.slice(Math.min(start, end), Math.max(start, end) + 1).prop('checked', e.target.checked);
            }
            lastChecked = this;
        });
    }
})


$(document).ready(function () {

});


$("button[type='submit']").click(function (e) {
    //TODO: request .formValidate den geliyorsa şartı eklenecek
    //var modal = e.target.closest("modal-dialog");
    //var close = modal.find(".close");
    debugger;
    var form = e.target.closest("form");
    var fieldset = e.target.closest("fieldset");
    var formID = form.id;
    var isValid = form.checkValidity();
    var action = form.getAttribute("action");
    var data = $('#' + formID).serialize();
    var thisTable = $(fieldset).find("table");
    //debugger;
    if (!isValid) {
        alertBox(false, "Lütfen Boş Alanları Doldurunuz.");
        e.preventDefault();
        e.stopPropagation();
        form.classList.add('was-validated');
    }
    else {
        e.preventDefault();
        e.stopPropagation();
        try {
            data = submitBeforeEvent(data);
            if (data == undefined) {
                return;
            }
       }
        catch (e) {
            console.log("Submit Before Error !")
        }
        
        $.ajax({
            url: action,
            type: 'POST',
            data: data,
            dataType: 'json',
            success: function (data) {
                if (data.RESULT) {
                    $('.close').click();
                    dataTable.reload(thisTable);
                    try { submitAfterEvent(data); } catch (e) { console.log("Submit After Error !") }
                }
                alertBox(data.RESULT, data.RESULT_MESSAGE);
            },
            error: function (hata, ajaxOptions, thrownError) {
                alertBox(data.RESULT, "Post Error!");
            }
        });

    }

    return false; // For testing only to stay on this page
});

$(document).keydown(function (e) {

    if (e.which == 113) { //F2
        $('#stokAraButton').click();
        return false;
    }

    if (e.which == 115) { //F4
        $('#cariAraButton').click();
        return false;
    }

    if (e.which == 83 && e.ctrlKey) { // CTRL+S
        $('.save-submit').click();
        return false;
    }


    if (typeof $(e.target).attr("aria-controls") !== 'undefined' && $(e.target).attr("aria-controls") !== false) {

        if (e.which == 13) {
            $('#' + e.target.getAttribute("aria-controls") + ' tbody tr')[0].focus();
            return false;
        }
    }

    if (e.target.tagName == 'TR') {

        if (e.which == 13) {
            document.activeElement.children[0].click()
            return false;
        }
        if (e.which == 40) {
            document.activeElement.nextElementSibling.focus();
            return false;
        }
        if (e.which == 38) {
            document.activeElement.previousElementSibling.focus();
            return false;
        }
    }
    try {
    } catch (e) {

    }
});


$(document).on('keypress', function (e) {

    try {

        if (e.which == 13 && e.shiftKey) {
            if (document.activeElement.className.includes("editable-cell")) {
                document.activeElement.parentElement.parentElement.previousElementSibling.querySelector('[clindex="' + document.activeElement.getAttribute("clindex") + '"]').focus();
                document.activeElement.select();

            }
            return false;
        }
        else if (e.which == 13) {
            if (document.activeElement.className.includes("editable-cell")) {
                document.activeElement.parentElement.parentElement.nextElementSibling.querySelector('[clindex="' + document.activeElement.getAttribute("clindex") + '"]').focus();
                document.activeElement.select();
            }
            return false;
        }
    }
    catch (err) { }
});


function int(value) {
    return parseInt(value);
}

function checkValue(sender) {
    calcMalHizmetTablesVals(sender);
    //let min = sender.min;
    //let max = sender.max;
    //let value = int(sender.value);
    //if (value > max) {
    //    sender.value = min;
    //    alertBox(false, 'Stok aşımı ! Maksimum girebileceğiniz stok ' + max);

    //} else if (value < min) {
    //    sender.value = max;
    //    alertBox(false, 'Stok aşımı ! Maksimum girebileceğiniz stok ' + max);
    //}
}




$('.remove').click(function (e) {

});

//function formatDecimalInputs() {
//    var inputs = document.getElementsByTagName('input');

//    for (var i = 0; i < inputs.length; i++) {
//        var input = inputs[i];
//        if (input.type === 'number') {
//            input.addEventListener('input', function (event) {
//                var value = event.target.value;
//                var formattedValue = value.replace('.', ',');
//                event.target.value = formattedValue;
//            });
//        }
//    }
//}




function calcMalHizmetTablesVals(sender) {
    if ($('#malHizmetDT').DataTable().data().length > 0) {
        var miktar = sender.parentElement.parentElement.querySelector('input[name="miktar"]');
        var birimFiyat = sender.parentElement.parentElement.querySelector('input[name="birimFiyat"]');
        var kdvTutari = sender.parentElement.parentElement.querySelector('input[name="kdvTutari"]');
        var kdvOrani = sender.parentElement.parentElement.querySelector('input[name="kdvOrani"]');
        var malHizmetTutari = sender.parentElement.parentElement.querySelector('input[name="malHizmetTutari"]');
        var tevkifatKodu = sender.parentElement.parentElement.querySelector('select[name="tevkifat"]');
        var tevkifatOran = sender.parentElement.parentElement.querySelector('input[name="tevkifatOran"]');
        var tevkifatTutar = sender.parentElement.parentElement.querySelector('input[name="tevkifatTutar"]');

        malHizmetTutari.value = (parseFloat(miktar.value) * parseFloat(birimFiyat.value)).toFixed(2);
        kdvTutari.value = (100 / 10000 * (parseFloat(kdvOrani.value) * parseFloat(malHizmetTutari.value))).toFixed(2);;



        tevkifatTutar.value = 0;
        if (tevkifatKodu.value != "" && tevkifatKodu.style.display != "none") {
            tevkifatOran.value = kismiTevkifatUygulananIslemTuru.find(o => o.kod == tevkifatKodu.value).oran.split("/")[0] / kismiTevkifatUygulananIslemTuru.find(o => o.kod == tevkifatKodu.value).oran.split("/")[1];;
            tevkifatTutar.value = (kdvTutari.value * tevkifatOran.value).toFixed(2);
        }
        else {
            tevkifatOran.value = 0;
        }


        var toplamTutar = document.querySelector('#BILL_TOPLAMTUTAR');
        toplamTutar.value = 0;
        $('#malHizmetDT input[name=malHizmetTutari]').each(function () {
            toplamTutar.value = (parseFloat(toplamTutar.value) + parseFloat(this.value)).toFixed(2);
        });

        var hesaplananKDV = document.querySelector('#BILL_HESAPLANANKDV');
        hesaplananKDV.value = 0;
        $('#malHizmetDT input[name=kdvTutari]').each(function () {
            hesaplananKDV.value = (parseFloat(hesaplananKDV.value) + parseFloat(this.value)).toFixed(2);;
        });

        var tevkifataTabiTutar = document.querySelector('#BILL_TEVKIFAT_TUTAR');
        tevkifataTabiTutar.value = 0;
        $('#malHizmetDT input[name=malHizmetTutari]').each(function () {
            if (this.parentElement.parentElement.querySelector('select[name="tevkifat"]').value != "") {
                tevkifataTabiTutar.value = (parseFloat(tevkifataTabiTutar.value) + parseFloat(this.value)).toFixed(2);;
            }
        });

        var tevkifataTabiKDV = document.querySelector('#BILL_TEVKIFAT_KDV');
        tevkifataTabiKDV.value = 0;
        $('#malHizmetDT input[name=kdvTutari]').each(function () {
            if (this.parentElement.parentElement.querySelector('select[name="tevkifat"]').value != "") {
                tevkifataTabiKDV.value = (parseFloat(tevkifataTabiKDV.value) + parseFloat(this.value)).toFixed(2);;
            }
        });

        var hesaplananKDVTevkifat = document.querySelector('#BILL_HESAPLANAN_KDV_TEVKIFAT');
        hesaplananKDVTevkifat.value = 0;
        $('#malHizmetDT input[name=tevkifatTutar]').each(function () {
            hesaplananKDVTevkifat.value = (parseFloat(hesaplananKDVTevkifat.value) + parseFloat(this.value)).toFixed(2);;
        });




        var toplamIskonto = document.querySelector('#BILL_TOPLAMISKONTO');
        toplamIskonto.value = 0;
        $('#malHizmetDT input[name=iskontoTutari]').each(function () {
            toplamIskonto.value = parseFloat(toplamIskonto.value) + parseFloat(this.value);
        });



        var vergilerDahilToplam = document.querySelector('#BILL_VERGILERDAHILTOPLAM');
        vergilerDahilToplam.value = 0;
        vergilerDahilToplam.value = (parseFloat(toplamTutar.value) + parseFloat(hesaplananKDV.value)).toFixed(2);;



        var odenecekTutar = document.querySelector('#BILL_ODENECEKTUTAR');
        odenecekTutar.value = 0;
        odenecekTutar.value = (parseFloat(vergilerDahilToplam.value) - parseFloat(hesaplananKDVTevkifat.value)).toFixed(2);;

    }
    else {
        var toplamTutar = document.querySelector('#BILL_TOPLAMTUTAR');
        toplamTutar.value = 0;

        var hesaplananKDV = document.querySelector('#BILL_HESAPLANANKDV');
        hesaplananKDV.value = 0;

        var tevkifataTabiTutar = document.querySelector('#BILL_TEVKIFAT_TUTAR');
        tevkifataTabiTutar.value = 0;

        var tevkifataTabiKDV = document.querySelector('#BILL_TEVKIFAT_KDV');
        tevkifataTabiKDV.value = 0;

        var hesaplananKDVTevkifat = document.querySelector('#BILL_HESAPLANAN_KDV_TEVKIFAT');
        hesaplananKDVTevkifat.value = 0;

        var toplamIskonto = document.querySelector('#BILL_TOPLAMISKONTO');
        toplamIskonto.value = 0;

        var vergilerDahilToplam = document.querySelector('#BILL_VERGILERDAHILTOPLAM');
        vergilerDahilToplam.value = 0;

        var odenecekTutar = document.querySelector('#BILL_ODENECEKTUTAR');
        odenecekTutar.value = 0;
    }
    //formatDecimalInputs();

}





let kismiTevkifatUygulananIslemTuru = [
    {
        "kod": 0,
        "oran": "0/0"
    },
    {
        "kod": 601,
        "oran": "4/10"
    },
    {
        "kod": 602,
        "oran": "9/10"
    },
    {
        "kod": 603,
        "oran": "7/10"
    },
    {
        "kod": 604,
        "oran": "5/10"
    },
    {
        "kod": 605,
        "oran": "5/10"
    },
    {
        "kod": 606,
        "oran": "9/10"
    },
    {
        "kod": 607,
        "oran": "9/10"
    },
    {
        "kod": 608,
        "oran": "9/10"
    },
    {
        "kod": 609,
        "oran": "7/10"
    },
    {
        "kod": 610,
        "oran": "9/10"
    },
    {
        "kod": 611,
        "oran": "9/10"
    },
    {
        "kod": 612,
        "oran": "9/10"
    },
    {
        "kod": 613,
        "oran": "9/10"
    },
    {
        "kod": 614,
        "oran": "5/10"
    },
    {
        "kod": 615,
        "oran": "7/10"
    },
    {
        "kod": 616,
        "oran": "5/10"
    },
    {
        "kod": 617,
        "oran": "7/10"
    },
    {
        "kod": 618,
        "oran": "7/10"
    },
    {
        "kod": 619,
        "oran": "7/10"
    },
    {
        "kod": 620,
        "oran": "7/10"
    },
    {
        "kod": 621,
        "oran": "9/10"
    },
    {
        "kod": 622,
        "oran": "9/10"
    },
    {
        "kod": 623,
        "oran": "5/10"
    },
    {
        "kod": 624,
        "oran": "2/10"
    },
    {
        "kod": 625,
        "oran": "3/10"
    },
    {
        "kod": 626,
        "oran": "2/10"
    },
    {
        "kod": 627,
        "oran": "5/10"
    }
];